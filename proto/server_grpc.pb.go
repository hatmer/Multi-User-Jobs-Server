// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobClient is the client API for Job service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobClient interface {
	// Starts a job
	Start(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*JobStatus, error)
	Stop(ctx context.Context, in *JobControlRequest, opts ...grpc.CallOption) (*JobStatus, error)
	QueryStatus(ctx context.Context, in *JobControlRequest, opts ...grpc.CallOption) (*JobStatus, error)
	StreamOutput(ctx context.Context, in *JobControlRequest, opts ...grpc.CallOption) (Job_StreamOutputClient, error)
}

type jobClient struct {
	cc grpc.ClientConnInterface
}

func NewJobClient(cc grpc.ClientConnInterface) JobClient {
	return &jobClient{cc}
}

func (c *jobClient) Start(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/server.Job/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) Stop(ctx context.Context, in *JobControlRequest, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/server.Job/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) QueryStatus(ctx context.Context, in *JobControlRequest, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/server.Job/QueryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) StreamOutput(ctx context.Context, in *JobControlRequest, opts ...grpc.CallOption) (Job_StreamOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &Job_ServiceDesc.Streams[0], "/server.Job/StreamOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobStreamOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Job_StreamOutputClient interface {
	Recv() (*Line, error)
	grpc.ClientStream
}

type jobStreamOutputClient struct {
	grpc.ClientStream
}

func (x *jobStreamOutputClient) Recv() (*Line, error) {
	m := new(Line)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobServer is the server API for Job service.
// All implementations must embed UnimplementedJobServer
// for forward compatibility
type JobServer interface {
	// Starts a job
	Start(context.Context, *JobStartRequest) (*JobStatus, error)
	Stop(context.Context, *JobControlRequest) (*JobStatus, error)
	QueryStatus(context.Context, *JobControlRequest) (*JobStatus, error)
	StreamOutput(*JobControlRequest, Job_StreamOutputServer) error
	mustEmbedUnimplementedJobServer()
}

// UnimplementedJobServer must be embedded to have forward compatible implementations.
type UnimplementedJobServer struct {
}

func (UnimplementedJobServer) Start(context.Context, *JobStartRequest) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedJobServer) Stop(context.Context, *JobControlRequest) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedJobServer) QueryStatus(context.Context, *JobControlRequest) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStatus not implemented")
}
func (UnimplementedJobServer) StreamOutput(*JobControlRequest, Job_StreamOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOutput not implemented")
}
func (UnimplementedJobServer) mustEmbedUnimplementedJobServer() {}

// UnsafeJobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServer will
// result in compilation errors.
type UnsafeJobServer interface {
	mustEmbedUnimplementedJobServer()
}

func RegisterJobServer(s grpc.ServiceRegistrar, srv JobServer) {
	s.RegisterService(&Job_ServiceDesc, srv)
}

func _Job_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Job/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).Start(ctx, req.(*JobStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Job/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).Stop(ctx, req.(*JobControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_QueryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).QueryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Job/QueryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).QueryStatus(ctx, req.(*JobControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_StreamOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobControlRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobServer).StreamOutput(m, &jobStreamOutputServer{stream})
}

type Job_StreamOutputServer interface {
	Send(*Line) error
	grpc.ServerStream
}

type jobStreamOutputServer struct {
	grpc.ServerStream
}

func (x *jobStreamOutputServer) Send(m *Line) error {
	return x.ServerStream.SendMsg(m)
}

// Job_ServiceDesc is the grpc.ServiceDesc for Job service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Job_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Job",
	HandlerType: (*JobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Job_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Job_Stop_Handler,
		},
		{
			MethodName: "QueryStatus",
			Handler:    _Job_QueryStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOutput",
			Handler:       _Job_StreamOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/server.proto",
}
